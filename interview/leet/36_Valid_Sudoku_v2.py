#!/usr/bin/env python

class Solution:
    def isValidSudoku(self, board: 'List[List[str]]') -> 'bool':
        rowDict, colDict, sqrDict = {}, {}, {}
        for i in range(9):
            for j in range(9):
                c = board[i][j] 
                if c == ".": continue
                if ((c,i) in rowDict) or ((c,j) in colDict) or ((c,i//3*3+j//3) in sqrDict):
                    return False
                else:
                    rowDict[(c,i)], colDict[(c,j)], sqrDict[(c,i//3*3+j//3)] = 1, 1, 1
        return True

board = [
  ["5","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]

board = [
  ["8","3",".",".","7",".",".",".","."],
  ["6",".",".","1","9","5",".",".","."],
  [".","9","8",".",".",".",".","6","."],
  ["8",".",".",".","6",".",".",".","3"],
  ["4",".",".","8",".","3",".",".","1"],
  ["7",".",".",".","2",".",".",".","6"],
  [".","6",".",".",".",".","2","8","."],
  [".",".",".","4","1","9",".",".","5"],
  [".",".",".",".","8",".",".","7","9"]
]

sol = Solution()
print(sol.isValidSudoku(board))
